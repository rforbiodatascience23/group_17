---
title: "06_heatmap1"
format: html
editor: visual
---

# Clustering analysis with all proteomics data

## Hierachial clustering visualised in a heatmap

```{r}
#| echo: false
#| label: load packages

library(tidyverse)

#if (!require('ggendro', character.only = TRUE)) {
  # If not installed, install the package
#  install.packages('ggdendro')
#}
library(ggdendro)
library(grid)
library(patchwork)
```

```{r}
#| label: load data (and augment)

cm <- read.table("../data/count_matrix_1_77.tsv", header = T) |>
  pivot_longer(cols = -id, names_to = 'variable', values_to = 'value') |>
  pivot_wider(names_from = id, values_from = value) |>
  rename(id = variable)

# define long data structure based on the count matrix
cm_long <- tidyr::gather(cm, key = "protein", value="value", -id)

cm <- cm |>
  column_to_rownames('id')

clinical_data <- read.table("../data/clinical_data.tsv", sep = "\t", header = T)
```

Hierachial clustering and dendogramming

```{r}
#| label: hierachial clustering

# create distance matrix (scaled)
dist_matrix <- cm |>
  scale() |>
  dist()

# perform hierachial clustering
hc <- hclust(dist_matrix, method = "complete")

# save clustering as dendogram
ddg <- as.dendrogram(hc)
  
# extract dendogram order
ddg_order <- order.dendrogram(ddg)
  
# extract all dendro information
ddg_data <- dendro_data(ddg)

# add pam50 information to ddg_data
ddg_label <- label(ddg_data)
ddg_label <- ddg_label |>
  rename(id = label) |> 
  left_join(clinical_data, by = c("id")) |> 
  select(x,y, id, pam50)


# create dendogram plot based on hierachial clustering
ddg_plot <- ggdendrogram(data = hc, rotate=T) +
  theme(axis.text.y = element_text(size=5),
        axis.text.x = element_blank()) +
  geom_text(data=ddg_data,
            aes(label=label, x=ddg_label$x, y=0, colour=ddg_label$pam50),
            size = 2)

ddg_plot


```

heatmapping by order of clustering

```{r}
#| label: visualization

# First scale the long data structure
cm_long_scaled <- cm_long
cm_long_scaled[,3] <- scale(cm_long_scaled[,3])

# Then order the datastructure according to the hierachial clustering:
cm_long_scaled$id <- factor(x = cm_long$id,
                               levels = cm_long_scaled$id[ddg_order], 
                               ordered = TRUE)


# heatmap on scaled data:
hm <- ggplot(data = cm_long_scaled, mapping = aes(x = protein, y = id)) +
        geom_tile(aes(fill=value)) +
        scale_fill_gradient2(low = "red", high = "blue") +
        theme_minimal() +
        theme(axis.text.x = element_blank(),
              axis.text.y = element_text(size = 5),
              legend.position = "left")
hm


# Extract relevant columns from clinical_data
selected_data <- clinical_data[, c("id", "pam50")]

# Define color mapping for pam50 values
color_mapping <- data.frame(
  pam50 = c("Basal-like", "HER2-enriched", "Luminal A", "Luminal B"),
  color = c("red", "blue", "green", "purple")
)

# Merge selected_data with color_mapping
merged_color_data <- merge(selected_data, color_mapping, by = "pam50", all.x = TRUE)
merged_color_data$id <- factor(merged_color_data$id, levels = unique(merged_color_data$id))



hm <- ggplot(data = cm_long_scaled, mapping = aes(x = protein, y = id)) +
  geom_tile(aes(fill = value)) +
  scale_fill_gradient2(low = "red", high = "blue") +
  scale_y_discrete(labels = merged_color_data$id) +  # Set y-axis labels
  scale_fill_manual(values = merged_color_data$color) +  # Set fill colors
  theme(
    axis.text.x = element_blank(),
    axis.text.y = element_text(size = 5),
    legend.position = "left"
  )

hm

```

Print the two plots side-by-side using patchwork:

```{r}
hm + ddg_plot
```
