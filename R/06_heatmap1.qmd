---
title: "06_heatmap1"
format: html
editor: visual
---

# Clustering analysis with all proteomics data

## Hierachial clustering visualised in a heatmap

```{r}
#| echo: false
#| label: load packages

library(tidyverse)

if (!require('ggendro', character.only = TRUE)) {
  # If not installed, install the package
  install.packages('ggdendro')
}
library(ggdendro)
library(grid)
```

```{r}
#| label: load data (and augment)

cm <- read.table("../data/count_matrix_1_77.tsv", header = T) |>
  pivot_longer(cols = -id, names_to = 'variable', values_to = 'value') |>
  pivot_wider(names_from = id, values_from = value) |>
  rename(id = variable)

# define long data structure based on the count matrix
cm_long <- tidyr::gather(cm, key = "protein", value="value", -id)

cm <- cm |>
  column_to_rownames('id')

clinical_data <- read.table("../data/clinical_data.tsv", sep = "\t", header = T)
```

Hierachial clustering and dendogramming

```{r}
#| label: hierachial clustering

# create distance matrix (scaled)
dist_matrix <- cm |>
  scale() |>
  dist()

# perform hierachial clustering
hc <- hclust(dist_matrix, method = "complete")

# save clustering as dendogram
ddg <- as.dendrogram(hc)
  
# extract dendogram order
ddg_order <- order.dendrogram(ddg)
  
# create dendogram plot based on hierachial clustering
ddg_plot <- ggdendrogram(data = hc, rotate=T) +
  theme(axis.text.y = element_text(size = 5))
ddg_plot
```

heatmapping by order of clustering

```{r}
#| label: visualization

# First scale the long data structure
cm_long_scaled <- cm_long
cm_long_scaled[,3] <- scale(cm_long_scaled[,3])

# Then order the datastructure according to the hierachial clustering:
cm_long_scaled$id <- factor(x = cm_long$id,
                               levels = cm_long_scaled$id[ddg_order], 
                               ordered = TRUE)


# heatmap on scaled data:
hm <- ggplot(data = cm_long_scaled, mapping = aes(x = protein, y = id)) +
        geom_tile(aes(fill=value)) +
        scale_fill_gradient(low = "white", high = "blue") +
        theme_minimal() +
        theme(axis.text.x = element_blank(),
              axis.text.y = element_text(size = 5))
hm
```

Print the two plots side-by-side

```{r}
grid.newpage()
print(hm, 
      vp = viewport(x = 0.4, y = 0.5, width = 0.8, height = 1.0))
print(ddg_plot, 
      vp = viewport(x = 0.90, y = 0.43, width = 0.2, height = 1.0))
```
