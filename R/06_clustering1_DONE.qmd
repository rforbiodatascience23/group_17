---
title: "06_hc_dendro"
format: html
editor: visual
---

# Clustering analysis with all proteomics data

## Hierachial clustering visualised with dendrograms

To investigate if the clinically assigned pam50 categories display in the proteomics dataset, we also wanted to do a hierachial clustering analysis. This was visualised using dendrograms.

First, packages and data were loaded.

```{r}
#| echo: false
#| label: load packages and data

# Packages
library(tidyverse)

if (!require('ggendro', character.only = TRUE)) {
# If not installed, install the package
 install.packages('ggdendro')
}
library(ggdendro)

# data
clinical_data <- read.table("../data/clinical_data.tsv", sep = "\t", header = T)
cm <- read.table("../data/count_matrix_1_77.tsv", header = T)
```

Next, the hierachial clustering was done.

```{r}
#| label: hierachial clustering

# create distance matrix (scaled) and perform hierachial clustering
hc <- cm |>
  dist() |> # calculating the distance for each value
  hclust(method = "ward.D2")  # applying the hierachial clustering algorithm to the data 

# save clustering as dendogram
ddg <- as.dendrogram(hc)
  
# extract dendogram order
ddg_order <- order.dendrogram(ddg)
  
# extract all dendro information
ddg_data <- dendro_data(ddg)

# add pam50 information to ddg_data
ddg_label <- label(ddg_data) |>
  rename(id = label) |> 
  left_join(clinical_data, by = c("id")) |> 
  select(x,y, id, pam50)

```

This was followed by visualisation in the form of a dendrogram using the ggdendro package.

```{r}
#| label: dendrogram

# create dendogram plot based on hierachial clustering
ddg_plot <- ggdendrogram(data = hc, rotate=TRUE) +
  theme(axis.text.y = element_blank(), # removing labels on x axis
        axis.text.x = element_blank(), # removing labels on Y axis
        plot.title = element_text(hjust = 0.5, vjust = 0)) +  
  geom_text(data=ddg_label,
            aes(label=id, x=x, y=-45, colour=pam50), # labels on y axis colored by pam50. 
            size = 1.5) +
  labs(title = "Hierachial clustering based on full proteomics dataset")

ddg_plot

# save dendrogram plot
ggsave("../plots/hc_dendro.png", ddg_plot, height = 4, width = 7)
```

**Conclusion**: From the colored labels, it is apparent, that the samples don't group by pam50 categories when a hierachial clustering is made on the entire proteomics dataset.

### Alternative method

By using the pheatmap package, we can couple the hierachial clustering analysis and visualisation in a dendogram (as done above) with that in a heatmap in very few steps of code:

```{r}
library(pheatmap)

cm2 <- read.table("../data/count_matrix_1_77.tsv", header = T) |>
  column_to_rownames('id')

pheatmap(
  mat = cm2,
  clustering_method = "ward.D2", # use hierachial clustering method
  scale = "row",
  show_rownames = FALSE,
  main = "Hierachial clustering analysis, all proteomics data",
  treeheight_row = 0, #do not display row tree
  fontsize_col= 3
  )
```

\
\
\
\*\*\* I suggest to delete below because I can't figure out how to order the rows like in the dendogram \*\*\*\

```{r}
#| label: visualization


# define long data structure based on the count matrix
cm_long <- cm |> 
  rownames_to_column(var = "id") |> # setting rownames to a column named id
  pivot_longer(cols = -c("id"), names_to = "protein")  # converting to pivot longer
  mutate(id = factor(x = id, levels = unique(id) |> reorder(ddg_order), ordered = T)) # Factorize the id column based on unique values from id ordered by the ddg_order

# heatmap on scaled data:
hm <- ggplot(data = cm_long, mapping = aes(x = protein)) +
        geom_tile(aes(fill=value)) + # heatmap function
        scale_fill_gradient2(low = "red", high = "blue") + # scale color (high values are blue, low values are red)
        theme_minimal() + 
        theme(axis.text.x = element_blank(), # remove label on x axis
              axis.text.y = element_blank(),
              legend.position = "left") +
        geom_text(data=ddg_label,
            aes(label=id, x=x, y=-175 colour=pam50), # labels on y axis colored by pam50. 
            size = 1.5)# position of the legend on the left
hm


```

Print the two plots side-by-side using patchwork:

```{r}
library(patchwork)
hm + ddg_plot 
```
