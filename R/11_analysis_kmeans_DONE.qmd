---
title: "K-means clustering and "
format: html
editor: visual
---

# K-means clustering using PCA

Here, we want to see if we can determine the PAM50 groups using only the significant proteins from the linear models.

First, we make a PCA using the

```{r}
#| label: load packages and data
library(tidyverse)
HER2 <- read.table("../data/diff_exp_HER2.tsv", header = T, sep = "\t") #Loading results from differential expression analysis - predicing HER2 condition based on count matrix
lumA <- read.table("../data/diff_exp_Luminal_A.tsv", header = T, sep = "\t") #Loading results from differential expression analysis - predicing luminal A condition based on count matrix
lumB <- read.table("../data/diff_exp_Luminal_B.tsv", header = T, sep = "\t") #Loading results from differential expression analysis - predicing Luminal B condition based on count matrix

basal_like <- read.table("../data/diff_exp_Basal_like.tsv", header = T, sep = "\t") #Loading results from differential expression analysis - predicing Basal like condition based on count matrix

protein_data <- read.table("../data/count_matrix_1_77.tsv", header = T, sep = "\t") # loading the count matrix

signif_fdr_prots <- c(HER2 |> filter(adjusted_fdr <= 0.05) |> pull(protein),
                  lumA |> filter(adjusted_fdr <= 0.05) |> pull(protein), 
                  lumB |> filter(adjusted_fdr <= 0.05) |> pull(protein), 
                  basal_like |> filter(adjusted_fdr <= 0.05) |> pull(protein)) # Extracting only significant hits from differential expression analysis. Significant hits are defined at genes that have an adjusted P-value under 0.05. 

signif_fdr_prots_unique <- unique(signif_fdr_prots) # extracting only unique gene names from significant hits 
#length(signif_fdr_prots_unique)
```

We can now isolate only significant hits form our count matrix.

```{r}
#| label: analysis 
count_matrix_reduced <- protein_data |>
  filter(id %in% signif_fdr_prots_unique) |> # Filtering so only differential expressed genes are present. 
  pivot_longer(cols = -id, names_to = "id2", values_to = "value")|> # Transforming to pivot_longer
  pivot_wider(names_from = id, values_from = value) |> # transforming it again to pivot_wider. to have the correct structure - gene names as columns and samples as rows
  column_to_rownames("id2")

count_matrix_reduced |> rownames_to_column("id") |> write_tsv("../data/count_matrix_significant_proteins.tsv") # saving results as a tsv file. 

```

PCA analysis of count matrix with only differentially expressed genes.

```{r}
#| label: analysis 2
pca <- count_matrix_reduced |>
  prcomp(center = TRUE,
         scale = TRUE) # prcomp is a function in R to transform the data into principal components. 

#Scree
pca  |>
  broom::tidy("pcs")|>  # From broom, we're using the tidy function to extract the nested list "pcs"
  mutate(percent = percent * 100) |>  # Overriding the column Percent by multiplying current value with 100
  ggplot(aes(x = PC, 
             y = percent)) +
  geom_col(colour = "black",
           alpha = 0.5) + # geom_Col function creates a barplot from the global values X as the princial compoennts and "Y" as the results form Principal components.
  theme_bw(base_size = 20) + # base_size = font size of the text 
  labs(title = "Scree Plot of PCA of significant proteins")

```

```{r}
#| label: analysis 3
pca_plot_axes_labels <- pca |>
  broom::tidy("eigenvalues") |> # extracting tidy function from broom package
  mutate(lbl = str_c("PC", PC, ", VE = ", round(percent*100,2), "%")) |> # Creating a new variable called lbl where values are created by concatenating the principal compoennts and its respective variance into a character string
  pull("lbl") # pulling the lbl value out
```

```{r}
#| label: analysis 4
clinical_data <- read_delim("../data/clinical_data.tsv") # Loading the clinical data.

pca_aug <- pca |>
  broom::augment(count_matrix_reduced) |> # Using the augment function from broom to extend the pca dataset with our count matrix of differentially expressed genes
  rename(id = ".rownames") |> # renaming the .rownames column to id
  left_join(clinical_data |>  select(c(id, pam50)), # appending the pam50 columns from the clinical dataset to the pca dataset, based on id. 
            by = "id") 

```

Now, we run the k-means algorithm using n = 4, as we have 4 groups we want to determine:

```{r}
#| label: analysis 5
k_means_clusters <- pca_aug |>
  select(c(.fittedPC1, .fittedPC2)) |> # selecting PC1 and PC2
  kmeans(centers = 4) |> # initializing Kmeans clustering with 4 clusters
  pluck("cluster") |> # extracting "cluster" list.
  as.factor() # converting the results to a factor for coloring and filling of PCA plot. 

```

```{r}
#| label: save results
PCA_kmeans <- pca_aug |>
  mutate(cluster = k_means_clusters) |>
  ggplot(aes(x = .fittedPC1, # PC1 on x axis
             y = .fittedPC2, # PC2 on y axis
             color = factor(k_means_clusters), # color based on pam50 
             fill = factor(k_means_clusters))) + # fill based on pam50
  geom_vline(xintercept = 0) +# creating a vertical line that interceps at x = 0
  geom_hline(yintercept = 0) +# creating a horizontal line that intercepts at y = 0
  geom_point(shape = 21, 
             size = 6, 
             alpha = 0.7, # transparency of the dots is set to 0.5
             aes(shape = pam50)) +
          # global are already given above and we not just apply design for the dots 
  labs(
    title = "PCA categorized through clusters", # title of the data
    x = pluck(pca_plot_axes_labels, 1), #name of x axis is extracted through the first value of pca_plot_axes_labels variable
    y = pluck(pca_plot_axes_labels, 2), #name of y axis is extracted through the second value of pca_plot_axes_labels variable
    color = "Cluster factor",
    fill = "Cluster factor"
  ) +
  theme_bw() + #setting theme to bw
  stat_ellipse(aes(fill = pam50, color = pam50), #adding informtion on the actual pam50 classifications
               type = "t", 
               geom = "polygon", 
               alpha = 0.1) 

print(PCA_kmeans)

ggsave("../results/PCA_with_clusters.png", PCA_kmeans, width = 8, height = 6, dpi = 300)
```

```{r}
rm(list = ls())
```
