---
title: "Loading of datasets"
format: html
editor: visual
---

# K-means clustering using PCA

Here, we want to see if we can determine the PAM50 groups using only the significant proteins from the linear models.

First, we make a PCA using the

```{r}
# signif_fdr_prots <- c(HER2 |> filter(adjusted_fdr <= 0.05) |> pull(protein),
#                   Luminal_A |> filter(adjusted_fdr <= 0.05) |> pull(protein), 
#                   Luminal_B |> filter(adjusted_fdr <= 0.05) |> pull(protein), 
#                   Basal_like |> filter(adjusted_fdr <= 0.05) |> pull(protein))

library(tidyverse)
HER2 <- read.table("../data/diff_exp_HER2.tsv", header = T, sep = "\t") 

lumA <- read.table("../data/diff_exp_Luminal_A.tsv", header = T, sep = "\t")

lumB <- read.table("../data/diff_exp_Luminal_B.tsv", header = T, sep = "\t")

basal_like <- read.table("../data/diff_exp_Basal_like.tsv", header = T, sep = "\t")
signif_fdr_prots <- c(HER2 |> filter(adjusted_fdr <= 0.05) |> pull(protein),
                  lumA |> filter(adjusted_fdr <= 0.05) |> pull(protein), 
                  lumB |> filter(adjusted_fdr <= 0.05) |> pull(protein), 
                  basal_like |> filter(adjusted_fdr <= 0.05) |> pull(protein))

protein_data <- read.table("../data/count_matrix_1_77.tsv", header = T, sep = "\t")

signif_fdr_prots_unique <- unique(signif_fdr_prots)

length(signif_fdr_prots_unique)
```

```{r}
count_matrix_reduced <- protein_data |>
  filter(id %in% signif_fdr_prots_unique) |>
  pivot_longer(cols = -id, names_to = "id2", values_to = "value")|>
  pivot_wider(names_from = id, values_from = value) |>
  column_to_rownames("id2")

count_matrix_reduced_save <- count_matrix_reduced |> rownames_to_column("id")
 
write_tsv(count_matrix_reduced_save, "../data/count_matrix_significant_proteins.tsv")
 
#rm(count_matrix_reduced_save)
 
# count_matrix_reduced <- read.table("../data/count_matrix_significant_proteins.tsv", header = T) |>
#   column_to_rownames("id")

pca <- count_matrix_reduced |>
  prcomp(center = TRUE,
         scale = TRUE) 

#Scree
pca  |>
  broom::tidy("pcs")|> 
  mutate(percent = percent * 100) |> 
  ggplot(aes(x = PC,
             y = percent)) +
  geom_hline(yintercept = 0) +
  geom_col(colour = "black",
           alpha = 0.5) +
  theme_bw(base_size = 20) +
  theme(panel.grid.minor.x = element_blank(),
        panel.grid.major.x = element_blank()) +
  labs(title = "Scree Plot of PCA of significant proteins")

```

```{r}
pca_plot_axes_labels <- pca |>
  broom::tidy("eigenvalues") |>
  mutate(lbl = str_c("PC", PC, ", VE = ", round(percent*100,2), "%")) |> 
  pull("lbl")
```

```{r}

clinical_data <- read_delim("../data/clinical_data.tsv")

pca_aug <- pca |>
  broom::augment(count_matrix_reduced) |>
  rename(id = ".rownames") |>
  left_join(clinical_data |>  select(c(id, pam50)),
            by = "id") 

pca_plot <- pca_aug |> 
  ggplot(aes(x = .fittedPC1,
             y = .fittedPC2,
             colour = pam50,
             fill = pam50)) +
  geom_vline(xintercept = 0) +
  geom_hline(yintercept = 0) +
  geom_point(shape = 21,
             size = 6,
             alpha = 0.5) +
  labs(
    title = "PCA",
    x = pluck(pca_plot_axes_labels, 1),
    y = pluck(pca_plot_axes_labels, 2))

pca_plot

```

Now, we run the k-means algorithm using n = 4, as we have 4 groups we want to determine:

```{r}

k_means_data <- pca_aug |>
  select(c(.fittedPC1, .fittedPC2)) 

kmeans_analysis <- kmeans(k_means_data, centers = 4) %>% 
  pluck("cluster") %>% 
  as.factor()

PCA_kmeans <- pca_aug %>% mutate(cluster = kmeans_analysis ) %>% 
    ggplot(aes(x = .fittedPC1,
             y = .fittedPC2,
             colour = kmeans_analysis,
             fill = kmeans_analysis)) +
  geom_vline(xintercept = 0) +
  geom_hline(yintercept = 0) +
  geom_point(shape = 21,
             size = 6,
             alpha = 0.5) +
  labs(
    title = "PCA",
    x = pluck(pca_plot_axes_labels, 1),
    y = pluck(pca_plot_axes_labels, 2),
    colour = "Cluster factor",
    fill = "Cluster factor") + 
  theme_bw()
  
PCA_kmeans
```
