---
title: "Differential gene expression analysis"
format: html
editor: visual
---

```{r}
library(tidyverse)
source("99_proj_func.R")
```

Load data:

```{r}

protein_data <- read.table("../data/count_matrix_1_77.tsv", header = T)|>
      #Load the count matrix
  pivot_longer(cols = -id, names_to = 'variable', values_to = 'value') |>
      #Pivot longer. First step in transposing the matrix. 
  pivot_wider(names_from = id, values_from = value) |>
      #Pivot wider - second step in transposing the matrix
  dplyr::rename(id = variable)
      #Rename the column 'variable' to 'id'

clinical_data <- read.table("../data/clinical_data.tsv", sep = "\t", header = T)
      #Read the clinial data
```

Wrangling the data into something which we can use in

```{r}

full_data <- clinical_data |>
  mutate( 
    DGEA_HER2 = case_when(
      pam50 == "HER2-enriched" ~ 1, 
      TRUE ~ 0
    ), # ^ Make a new column called 'DGEA_HER2' storing binary information of 
       # whether the individual is positive (1) or negative (0) for HER2
    DGEA_Luminal_A = case_when(
      pam50 == "Luminal A" ~ 1, 
      TRUE ~ 0
  ),   # ^ Make a new column called 'DGEA_Luminal_A' storing binary information of 
       # whether the individual is positive (1) or negative (0) for Luminal A
    DGEA_Luminal_B = case_when(
      pam50 == "Luminal B" ~ 1, 
      TRUE ~ 0
      ),# ^ Make a new column called 'DGEA_Luminal_B' storing binary information of 
       # whether the individual is positive (1) or negative (0) for Luminal B
    DGEA_Basal_like = case_when(
      pam50 == "Basal-like" ~ 1, 
      TRUE ~ 0)) |>
        # ^ Make a new column called 'DGEA_Basal_like' storing binary information of 
       # whether the individual is positive (1) or negative (0) for Basal like
  left_join(protein_data, by = "id")
        # Leftjoin the protein expression data to make a big dataframe with everything



```

In the following, the actual gene expression analysis takes place. 4 analyses are made - one for each subtype of PAM50. Each subtype is compared to all the rest of the data. Thus, almost the same code is used 4 times. For HER2, each step is described.

The function for making the linar predictions are made in the `99_proj_func.R` file and are called to this file using `source()`.

```{r}
source('99_proj_func.R')

# Her 2
HER2 <- linear_model_deg(data = full_data, test = "DGEA_HER2")

#Luminal A
Luminal_A <- linear_model_deg((data = full_data,test = "DGEA_Luminal_A")

#Luminal B
Luminal_B <- linear_model_deg((data = full_data,test = "DGEA_Luminal_B")

#Basal like
Basal_like <- linear_model_deg((data = full_data,test = "DGEA_Basal_like")

```

Save:

```{r}
# Save the results for easy import into next steps of the analysis.
write_tsv(HER2, "../data/diff_exp_HER2.tsv")
write_tsv(Luminal_A, "../data/diff_exp_Luminal_A.tsv")
write_tsv(Luminal_B, "../data/diff_exp_Luminal_B.tsv")
write_tsv(Basal_like, "../data/diff_exp_Basal_like.tsv")
```

```{r}
rm(list = ls())
```
