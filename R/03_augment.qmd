---
title: "3. Augment"
format: html
editor: visual
---

In this file, all different kinds of data that we need is made.

Summary of data-sets used for this project (saved in the `data` folder)

-   A clean, simple count matrix with just protein-values and subjects

-   A dataset of just the clinical data

-   A combined dataset of the protein data and clinical data

### Making the full data set:

First, the count matrix is transposed using `pivor_longer` and `pivot_wider`. This is done to get the subjects as rows and proteins as columns.

```{r}

protein_data <- read.table("../data/count_matrix_1_77.tsv", header = T)|>
      #Load the count matrix
  pivot_longer(cols = -id, names_to = 'variable', values_to = 'value') |>
      #Pivot longer. First step in transposing the matrix. 
  pivot_wider(names_from = id, values_from = value) |>
      #Pivot wider - second step in transposing the matrix
  dplyr::rename(id = variable)
      #Rename the column 'variable' to 'id'


```

Now, the clinical data is loaded and joined to the protein data in a dataset called `full_data`. Additionally, new columns are made, storing binary information of which subgroup (pam50-classification) each person is in.

```{r}
clinical_data <- read.table("../data/clinical_data.tsv", sep = "\t", header = T)
      #Read the clinial data

full_data <- clinical_data |>
  mutate( 
    DGEA_HER2 = case_when(
      pam50 == "HER2-enriched" ~ 1, 
      TRUE ~ 0
    ), # ^ Make a new column called 'DGEA_HER2' storing binary information of 
       # whether the individual is positive (1) or negative (0) for HER2
    DGEA_Luminal_A = case_when(
      pam50 == "Luminal A" ~ 1, 
      TRUE ~ 0
  ),   # ^ Make a new column called 'DGEA_Luminal_A' storing binary information of 
       # whether the individual is positive (1) or negative (0) for Luminal A
    DGEA_Luminal_B = case_when(
      pam50 == "Luminal B" ~ 1, 
      TRUE ~ 0
      ),# ^ Make a new column called 'DGEA_Luminal_B' storing binary information of 
       # whether the individual is positive (1) or negative (0) for Luminal B
    DGEA_Basal_like = case_when(
      pam50 == "Basal-like" ~ 1, 
      TRUE ~ 0)) |>
        # ^ Make a new column called 'DGEA_Basal_like' storing binary information of 
       # whether the individual is positive (1) or negative (0) for Basal like
  left_join(protein_data, by = "id")
        # Leftjoin the protein expression data to make a big dataframe with everything

write.table(full_data, "../data/full_data.tsv")

```

```{r}
rm(list = ls())
```

```{r}
#quarto::quarto_render("03_augment.qmd",output_format = "html",execute = T)
#file.rename(from = "03_augment.html",
#            to = "../results/03_augment.html")
```
